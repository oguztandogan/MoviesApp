//
//  MoviesPresenter.swift
//  MovieApp
//
//  Created by Oguz Tandogan on 31.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import UIKit
import MovieAppWebService
import FirebaseAnalytics
import FirebaseCrashlytics
import Firebase

final class MoviesPresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: MoviesViewInterface
    private let formatter: MoviesFormatterInterface
    private let interactor: MoviesInteractorInterface
    private let wireframe: MoviesWireframeInterface
    
    private let moviesCallback = MoviesCallback()
    
    private var moviesResponse: [MoviesListResponseModel] = [] {
        didSet {
            view.reloadData()
        }
    }
    // MARK: - Lifecycle -
    
    init(view: MoviesViewInterface, formatter: MoviesFormatterInterface, interactor: MoviesInteractorInterface, wireframe: MoviesWireframeInterface) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    private func firebaseLog(index: Int) {
        Analytics.logEvent(AnalyticsEventSelectContent, parameters: ["title": "\(moviesResponse[index].title)",
                                                                     "type": "\(moviesResponse[index].type)"])
    }
}

// MARK: - Extensions -

extension MoviesPresenter: MoviesPresenterInterface {
    
    func getSearchedMovies(movieId: String?) {
        moviesCallback.commonResult { [weak self] (result) in
            self?.getParsedSearchedMoviesResponse(result: result)
        }
        interactor.getSearchedMovies(callback: moviesCallback, params: MoviesRequestModel(movieId: movieId))
        view.playLoadingAnimation()
    }
    
    func getParsedSearchedMoviesResponse(result: Result<MoviesResponseModel, BaseErrorResponse>) {
        switch result {
        case .failure(let error):
            print(error)
            view.stopLoadingAnimation()
            
        case .success(let success):
            print(success)
            handleSearchedMoviesResponse(response: success)
        }
    }
    
    func handleSearchedMoviesResponse(response: MoviesResponseModel) {
        if response.response == "False" {
            moviesResponse.removeAll()
            view.stopLoadingAnimation()
            view.createAlertViewForResponseError()
        } else {
            guard let movieListResponse = response.search else {
                return
            }
            moviesResponse = movieListResponse
            view.stopLoadingAnimation()
        }
        
    }
    func getRowNumber() -> Int {
        return moviesResponse.count
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        let id = moviesResponse[indexPath.row].imdbId
        wireframe.navigate(option: .movieDetails(id))
    }
    
    func loadTableViewData(at indexPath: IndexPath) -> MoviesListResponseModel? {
        firebaseLog(index: indexPath.row)
        return moviesResponse[indexPath.row]
    }
}
